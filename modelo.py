# -*- coding: utf-8 -*-
"""Cópia de Alagometro

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e_9AEPjl6cTzN28qJ94U-q6f-4emmN4v
"""

import pandas as pd
import numpy as np
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, recall_score, f1_score
import matplotlib.pyplot as plt
import datetime

# Simulação de Dados

np.random.seed(42) #

# Número de pontos de dados
num_pontos_total = 1000

# Gera dados de não alagamento
num_nao_alagamento = int(num_pontos_total * 0.8)
data_nao_alagamento = []
for i in range(num_nao_alagamento):
    timestamp = datetime.datetime.now() - datetime.timedelta(minutes=i*10)
    umidade = np.random.uniform(50, 80) # Umidade
    temperatura = np.random.uniform(20, 30) # Temperatura
    potenciometro = 0 # Sem alagamento
    data_nao_alagamento.append([timestamp, umidade, temperatura, potenciometro])

# Gera dados de alagamento
num_alagamento = num_pontos_total - num_nao_alagamento
data_alagamento = []
for i in range(num_alagamento):
    timestamp = datetime.datetime.now() - datetime.timedelta(minutes=i*5)
    umidade = np.random.uniform(90, 100) # Umidade alta
    temperatura = np.random.uniform(10, 20) # Temperatura baixa
    potenciometro = 1 # Com alagamento
    data_alagamento.append([timestamp, umidade, temperatura, potenciometro])

# Combinar os dados e embaralhar
df = pd.DataFrame(data_nao_alagamento + data_alagamento, columns=['timestamp', 'umidade', 'temperatura', 'potenciometro'])
df = df.sample(frac=1).reset_index(drop=True)

print("Primeiras 5 linhas do DataFrame simulado:")
print(df.head())
print("\nContagem de classes (0=não alagamento, 1=alagamento):")
print(df['potenciometro'].value_counts())

# Preparação dos Dados para Treino

X = df[['umidade', 'temperatura']] # Features
y = df['potenciometro'] # Variável Alvo

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)


print(f"\nTamanho do conjunto de treino: {len(X_train)}")
print(f"Tamanho do conjunto de teste: {len(X_test)}")

# Treinamento da Árvore de Decisão

model = DecisionTreeClassifier(random_state=42, max_depth=5) # max_depth para evitar que a árvore fique muito complexa
model.fit(X_train, y_train)

print("\nModelo de Árvore de Decisão treinado!")

y_pred = model.predict(X_test)

print("\n--- Avaliação do Modelo ---")

# Mostra se a bagaça funciona
acuracia = accuracy_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

print(f"Acurácia: {acuracia:.4f}")
print(f"Recall: {recall:.4f}")
print(f"F1-score: {f1:.4f}")

print("\nRelatório de Classificação:\n", classification_report(y_test, y_pred))
print("\nMatriz de Confusão:\n", confusion_matrix(y_test, y_pred))

# Ver arvore
plt.figure(figsize=(20, 10))
plot_tree(model, feature_names=X.columns, class_names=['Não Alagamento', 'Alagamento'], filled=True, rounded=True)
plt.title("Árvore de Decisão para Detecção de Alagamentos (Simulada)")
plt.show()

print(" Testando novas previsõe ")

# Cenário 1: Normal
umidade_teste_1 = 70
temperatura_teste_1 = 25
previsao_1 = model.predict([[umidade_teste_1, temperatura_teste_1]])
print(f"Umidade: {umidade_teste_1}%, Temperatura: {temperatura_teste_1}°C -> Previsão: {'Alagamento' if previsao_1[0] == 1 else 'Não Alagamento'}")

# Cenário 2: Potencial alagamento
umidade_teste_2 = 95
temperatura_teste_2 = 18
previsao_2 = model.predict([[umidade_teste_2, temperatura_teste_2]])
print(f"Umidade: {umidade_teste_2}%, Temperatura: {temperatura_teste_2}°C -> Previsão: {'Alagamento' if previsao_2[0] == 1 else 'Não Alagamento'}")

modelo_alfa = f'modelo_random_forest_alagamento_{int(time.time())}.joblib' # totalmente overffitado o inquilino
joblib.dump(best_rf_model, modelo_alfa)
print(f"\nModelo salvo com sucesso em '{modelo_alfa}'")

